name: Build ISO VoidLinux

# Gatilhos para o workflow
on:
#  push:
#    branches:
#      - main
  repository_dispatch:  # aguarda um evento externo para iniciar o workflow (útil para automações externas que acionam o GitHub Actions).
    types:
      - "ISO-*"
  workflow_dispatch:    # Permite a execução manual do workflow via interface do GitHub, e você definiu inputs como name, edition, e tmate
    inputs:
      teste_input:
        type: boolean
        description: "Marque para testes"
        required: false
        default: false
      name:
        type: string
        description: "Name for the ISO"
        required: true
        default: "VOID_LIVE"
      edition:
        type: choice
        description: "Edition"
        options:
          - live-base-custom
          - live-xfce-base
          - live-xfce-custom
          - live-awesome
          - live-enlightnment
          - live-fluxbox
          - live-gnome
          - live-kde
          - live-all
        default: "live-xfce-custom"
      tmate:
        type: boolean
        description: "Enable debugging with tmate"
        required: false
        default: false

  schedule:
    #- cron: "0 6 * * *" # Roda todo dia às 06:00 UTC
    - cron: "0 18 * * 5" # Roda toda sexta-feira às 18:00 UTC

# Jobs do workflow
jobs:
  # Job para obter a hora atual
  get-time:
    runs-on: ubuntu-latest
    outputs:
      time: ${{ steps.time.outputs.time }} # Saída do job
    steps:
      - name: Obter a hora atual
        id: time
        #run: echo "::set-output name=time::$(date +'%Y.%m.%d-%H%M')"
        run: echo "time=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT

  # Job para definir o nome do repositório
  set-repo-name:
    runs-on: ubuntu-latest
    outputs:
      REPOSITORY_NAME: ${{ steps.get-repo-name.outputs.repo_name }}
    steps:
      - name: Obter nome do repositório
        id: get-repo-name
        #run: echo "::set-output name=repo_name::$(basename $GITHUB_REPOSITORY)"
        run: echo "repo_name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ github.event.client_payload.edition || github.event.inputs.edition || 'live-xfce-custom' }}
    runs-on: ubuntu-latest
    needs: [get-time, set-repo-name] # Depende do job get-time para obter a hora atual e do job set-repo-name para obter o nome do repositório
    env:
      REPO_NAME: ${{ needs.set-repo-name.outputs.REPOSITORY_NAME }} # Acesso à variável de ambiente definida no job anterior
    container:
      image: vcatafesta/voidlinux-docker:latest
      options: --privileged
      volumes:
        - /mnt/lfs:/mnt/lfs

    steps:
      - name: Set up volume directory on HOST
        run: |
          mkdir -p /mnt/lfs

      - name: Install Required Packages and Libraries
        run: |
          #{
          #echo 'repository=https://repo-fastly.voidlinux.org/current'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/nonfree'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/multilib'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/multilib/nonfree'
          #echo 'repository=https://chililinux.com/void/current'
          #} > /etc/xbps.d/00-repository-main.conf

          xbps-install -Syu -ff \
            xbps \
            xtools \
            bash \
            sudo \
            openssh \
            tmate \
            xz \
            zip \
            kmod \
            ncurses \
            which \
            vpm \
            libstdc++ \
            vim \
            nano \
            curl \
            git \
            bash \
            tree \
            duf \
            gettext \
            rsync \
            util-linux \
            coreutils \
            sed \
            grep \
            btrfs-progs \
            e2fsprogs \
            exfatprogs \
            dosfstools \
            xfsprogs

      - name: Create user builduser
        run: |
          useradd -m -G wheel,audio,video,cdrom,optical,kvm,xbuilder builduser

      - name: Display the current user in container
        run: |
          echo "#########################################"
          echo "Current container is: $(hostname)"
          echo "Current user is: $(whoami)"
          echo "Current user ID is: $(id -u)"
          echo "Current user details:"
          id
          echo "#########################################"
          df -hT
          echo "#########################################"
          ls -la /mnt
          echo "#########################################"

      - name: Initial Debug
        run: |
          echo "Workflow started"
          echo "Event Name: ${{ github.event_name }}"
          echo "Event Action: ${{ github.event.action }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build ISO
        uses: ./
        id: build
        with:
          name: ${{ github.event.client_payload.name || inputs.name }}
          edition: ${{ github.event.client_payload.edition || inputs.edition }}
          release_tag: ${{ github.event.client_payload.release_tag || inputs.release_tag }}
          kernel: ${{ github.event.client_payload.kernel || inputs.kernel }}
          scope: ${{ github.event.client_payload.scope || inputs.scope }}
          office-chooser: ${{ github.event.client_payload.office-chooser || inputs.office-chooser }}

          # Parâmetros de branches
          manjaro_branch: ${{ github.event.client_payload.manjaro_branch || inputs.manjaro_branch }}
          community_branch: ${{ github.event.client_payload.community_branch || inputs.community_branch }}
          biglinux_branch: ${{ github.event.client_payload.biglinux_branch || inputs.biglinux_branch }}

          # Depuração
          tmate: ${{ github.event.client_payload.tmate || 'false' }}

          # Tokens e segredos
          github_token: ${{ secrets.ORGANIZATION_TOKEN }}

      - name: Calculate MD5 Hash of files
        if: ${{ inputs.teste_input != 'true' }}
        shell: bash
        run: |
          pushd "${{ env.WORK_PATH }}" || true
          echo "Calculating MD5 hash for: ${{ env.ISO_BASENAME }} file..."
          echo "ISO_BASENAME is: '${{ env.ISO_BASENAME }}'"
          if [[ -f "${{ env.ISO_BASENAME }}" ]]; then
            md5sum "${{ env.ISO_BASENAME }}" > "${{ env.ISO_BASENAME }}.md5"
            echo "MD5 '$ISO_BASENAME.md5' hash calculated and saved:"
            cat "${{ env.ISO_BASENAME }}.md5"
          else
            echo "ERRO: ${{ env.ISO_BASENAME }} file not found at ${{ env.WORK_PATH }}"
            exit 1
          fi
          popd || true

      - name: Prepare ISO file for release
        if: ${{ inputs.teste_input != 'true' }}
        id: prepare-iso
        shell: bash
        run: |
          pushd "${{ env.WORK_PATH }}" || true
          ls -lha
          release=${{ env.ISO_BASENAME }} # Apenas obtém o nome do arquivo com extensão
          release="${release%.iso}"
          echo "release_name=${release}" >> $GITHUB_ENV
          if zip \
              --junk-paths \
              --store \
              -s 2000m \
              ${release}.zip \
              ${{ env.ISO_FULLNAME }} \
              ${{ env.ISO_FULLNAME }}.md5; then
            echo "ISO_FULLNAME=${{ env.WORK_PATH }}/${release}.iso" >> "$GITHUB_ENV"
            echo "ISO_BASENAME=${release}.iso"                      >> "$GITHUB_ENV"
            echo "ZIP_BASENAME=${release}.zip"                      >> "$GITHUB_ENV"
            echo "${ISO_FULLNAME} prepared for release"
            ls -lha
          else
            echo "ERRO: No preparo do arquivo ISO para release"
            exit 1
          fi
          popd || true

      - name: Debug environment variables and List Files
        if: ${{ inputs.teste_input != 'true' }}
        run: |
          echo "ISO_BASENAME=${{ env.ISO_BASENAME }}"
          echo "ISO_FULLNAME=${{ env.ISO_FULLNAME }}"
          echo "ISO Path from output=${{ steps.define-paths.outputs.iso_path }}"
          ls -lah "${{ env.WORK_PATH }}"

      - name: Verificar arquivo .iso
        if: ${{ inputs.teste_input != 'true' }}
        run: ls -lah --color=auto ${{ env.ISO_FULLNAME }} # Verifique se o arquivo .iso foi gerado corretamente

      - name: Upload FILES as artifact
        if: ${{ inputs.teste_input != 'true' }}
        uses: actions/upload-artifact@v3
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
        with:
          name: ${{ env.ISO_BASENAME }}
          path: |
            ${{ env.ISO_FULLNAME }}
            ${{ env.ISO_FULLNAME }}
            ${{ env.ISO_FULLNAME }}.md5
          if-no-files-found: warn
          include-hidden-files: false

      - name: Criar release iso
        if: ${{ inputs.teste_input != 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
        with:
          tag_name: ${{ env.ISO_TAG_NAME }}
          release_name: Release ${{ env.ISO_TAG_NAME }}
          body: |
            - **Data e Hora        :** ${{ needs.get-time.outputs.time }}
            - **Arquivo ISO        :** ${{ env.ISO_BASENAME }}
            - **Arquivo MD5        :** ${{ env.ISO_FULLNAME }}.md5
            - **Nome do Repositório:** ${{ env.REPO_NAME }}
          draft: false
          prerelease: false

      - name: Configurar chave SSH e Adicionar chave do host remoto ao known_hosts
        if: ${{ inputs.teste_input != 'true' }}
        run: |
          mkdir -p /root/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /root/.ssh/id_rsa
          chmod 600 /root/.ssh/id_rsa
          ssh-keyscan -p 65002 -H ${{ secrets.SERVER_HOST }} >> /root/.ssh/known_hosts

      - name: Enviar arquivo ISO para o servidor via SCP com porta customizada
        if: ${{ inputs.teste_input != 'true' }}
        run: |
          scp -P 65002 \
              -v \
              -o StrictHostKeyChecking=no \
              -i /root/.ssh/id_rsa \
              ${{ env.ISO_FULLNAME }} \
              ${{ env.ISO_FULLNAME }}.md5 \
              ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/void/iso

      - name: Fazer upload do arquivo .zip no release
        if: ${{ inputs.teste_input != 'true' }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # URL gerada no passo da criação da release
          asset_path: ${{ env.ZIP_BASENAME }} # Caminho do arquivo .iso
          asset_name: ${{ env.ZIP_BASENAME }}.zip
          asset_content_type: application/zip # Tipo correto para arquivos .z
