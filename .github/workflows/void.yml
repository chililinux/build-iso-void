name: Build ISO VoidLinux

# Gatilhos para o workflow
on:
  push:
    branches:
      - main
  repository_dispatch:
    types:
      - "ISO-*"
  workflow_dispatch:
    inputs:
      name:
        type: string
        description: "Name for the ISO"
        required: true
        default: "voidlinux"
      tmate:
        type: boolean
        description: "Enable debugging with tmate"
        required: false
        default: true

# Jobs do workflow
jobs:
  # Job para obter a hora atual
  get-time:
    runs-on: ubuntu-latest
    outputs:
      time: ${{ steps.time.outputs.time }} # Saída do job
    steps:
      - name: Obter a hora atual
        id: time
        run: echo "time=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV

  # Job para definir o nome do repositório
  set-repo-name:
    runs-on: ubuntu-latest
    outputs:
      REPOSITORY_NAME: ${{ steps.get-repo-name.outputs.repo_name }}
    steps:
      - name: Obter nome do repositório
        id: get-repo-name
        run: echo "repo_name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV

  build:
    name: Build ISO ${{ github.event.client_payload.edition || 'Unknown' }}
    runs-on: ubuntu-latest
    needs: [get-time, set-repo-name] # Depende do job get-time para obter a hora atual e do job set-repo-name para obter o nome do repositório
    env:
      REPO_NAME: ${{ needs.set-repo-name.outputs.REPOSITORY_NAME }}
    container:
      image: vcatafesta/voidlinux-docker:latest
      options: --privileged
      volumes:
        - /mnt/var_lib_manjaro_tools_buildiso:/var/lib/manjaro-tools/buildiso
        - /mnt/var_cache_manjaro_tools_iso:/var/cache/manjaro-tools/iso

    steps:
      - name: Set up volume directory on HOST
        run: |
          mkdir -p /mnt/var_lib_manjaro_tools_buildiso
          mkdir -p /mnt/var_cache_manjaro_tools_iso

      - name: Install Required Libraries
        run: |
          xbps-install -Syu -f \
            xbps \
            xz \
            zip \
            kmod \
            ncurses \
            which \
            sudo \
            tmate \
            openssh \
            vpm \
            libstdc++ \
            vim \
            nano \
            curl \
            git \
            bash \
            xtools \
            tree \
            vpm \
            duf

      - name: Create user builduser
        run: |
          useradd -m -G wheel,audio,video,cdrom,optical,kvm,xbuilder builduser

      - name: Display the current user in container
        run: |
          echo "#########################################"
          echo "Current container is: $(hostname)"
          echo "Current user is: $(whoami)"
          echo "Current user ID is: $(id -u)"
          echo "Current user details:"
          id
          echo "#########################################"
          df -hT
          echo "#########################################"
          ls -la /mnt
          echo "#########################################"

      - name: Initial Debug
        run: |
          echo "Workflow started"
          echo "Event Name: ${{ github.event_name }}"
          echo "Event Action: ${{ github.event.action }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build ISO
        uses: ./
        id: build
        with:
          name: ${{ github.event.client_payload.name || inputs.name }}
          edition: ${{ github.event.client_payload.edition || inputs.edition }}
          release_tag: ${{ github.event.client_payload.release_tag || inputs.release_tag }}
          kernel: ${{ github.event.client_payload.kernel || inputs.kernel }}
          scope: ${{ github.event.client_payload.scope || inputs.scope }}
          office-chooser: ${{ github.event.client_payload.office-chooser || inputs.office-chooser }}

          # Parâmetros de branches
          manjaro_branch: ${{ github.event.client_payload.manjaro_branch || inputs.manjaro_branch }}
          community_branch: ${{ github.event.client_payload.community_branch || inputs.community_branch }}
          biglinux_branch: ${{ github.event.client_payload.biglinux_branch || inputs.biglinux_branch }}

          # Depuração
          tmate: ${{ github.event.client_payload.tmate || 'false' }}

          # Tokens e segredos
          github_token: ${{ secrets.TOKEN_RELEASE }}

      - name: Calculate FILES MD5 Hash
        shell: bash
        run: |
          echo "Calculating MD5 hash for TAR.GZ file..."
          echo "XZ_PATH is: '${{ env.XZ_PATH }}'"
          if [[ -f "${{ env.XZ_PATH }}" ]]; then
            md5sum "${{ env.XZ_PATH }}" > "${{ env.XZ_PATH }}.md5"
            echo "MD5 hash calculated and saved:"
            cat "${{ env.XZ_PATH }}.md5"
          else
            echo "Error: TAR.XZ file not found at ${{ env.XZ_PATH }}"
            exit 1
          fi

      - name: Prepare FILES for release
        id: prepare-iso
        shell: bash
        run: |
          ls -lh
          release=$(basename "${{ env.XZ_PATH }}")  # Apenas obtém o nome do arquivo com extensão
          zip -j -0 -s 2000m ${release}.zip ${{ env.XZ_PATH }}
          echo "release_name=${release}" >> $GITHUB_ENV
          echo "XZ_BASENAME=$(basename "${{ env.XZ_PATH }}")" >> $GITHUB_ENV
          echo "TAR.GZ prepared for release"

      - name: Debug environment variables and List Files
        run: |
          echo "ISO_BASENAME=${{ env.ISO_BASENAME }}"
          echo "ISO_FULLNAME=${{ env.XZ_FULLNAME }}"
          echo "XZ_BASENAME=${{ env.XZ_BASENAME }}"
          echo "XZ_FULLNAME=${{ env.XZ_FULLNAME }}"
          echo "ISO Path from output: ${{ steps.define-paths.outputs.iso_path }}"
          echo "XZ Path from output: ${{ steps.define-paths.outputs.xz_path }}"
          ls -la "${{ env.WORK_PATH }}"

      - name: Upload FILES as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.XZ_BASENAME }} # Nome do artefato, ajustado para incluir a variável correta
          path: |
            ${{ env.XZ_FULLNAME }}          # Caminho completo para o arquivo .tar.xz
            ${{ env.XZ_FULLNAME }}.md5      # Se houver um arquivo .md5 para ser incluído
          if-no-files-found: warn
          include-hidden-files: false

      - name: Criar release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
        with:
          tag_name: ${{ env.XZ_BASENAME }}
          release_name: Release ${{ needs.get-time.outputs.time }}
          body: |
            ## Descrição da Release

            - **Data e Hora        :** ${{ needs.get-time.outputs.time }}
            - **Nome do Repositório:** ${{ env.REPO_NAME }}

          draft: false
          prerelease: false

      - name: Fazer upload do arquivo .tar.xz no release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # URL gerada no passo da criação da release
          asset_path: ${{ env.XZ_PATH }} # Caminho do arquivo .tar.xz
          asset_name: ${{ env.XZ_BASENAME }} # Nome do arquivo sem o caminho completo
          asset_content_type: application/x-xz # Tipo correto para arquivos .xz
