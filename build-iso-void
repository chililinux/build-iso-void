#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166
#
#  build-iso-void
#  Created: 2024/09/22 - 07:39
#  Altered: 2024/09/22 - 07:39
#
#  Copyright (c) 2024-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
#export LANGUAGE=pt_BR
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=build-iso-void

# Definir a variável de controle para restaurar a formatação original
reset=$(tput sgr0)

# Definir os estilos de texto como variáveis
bold=$(tput bold)
underline=$(tput smul)   # Início do sublinhado
nounderline=$(tput rmul) # Fim do sublinhado
reverse=$(tput rev)      # Inverte as cores de fundo e texto

# Definir as cores ANSI como variáveis
black=$(tput bold)$(tput setaf 0)
red=$(tput bold)$(tput setaf 196)
green=$(tput bold)$(tput setaf 2)
yellow=$(tput bold)$(tput setaf 3)
blue=$(tput setaf 4)
pink=$(tput setaf 5)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
gray=$(tput setaf 8)
orange=$(tput setaf 202)
purple=$(tput setaf 125)
violet=$(tput setaf 61)
light_red=$(tput setaf 9)
light_green=$(tput setaf 10)
light_yellow=$(tput setaf 11)
light_blue=$(tput setaf 12)
light_magenta=$(tput setaf 13)
light_cyan=$(tput setaf 14)
bright_white=$(tput setaf 15)

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset}'
#set -x
#set -e
shopt -s extglob

#system
declare APP="${0##*/}"
declare _VERSION_="1.0.0-20240922"
declare distro="$(uname -n)"
declare DEPENDENCIES=(tput)
source /usr/share/fetch/core.sh

MostraErro() {
	echo "erro: ${red}$1${reset} => comando: ${cyan}'$2'${reset} => result=${yellow}$3${reset}"
}
trap 'MostraErro "$APP[$FUNCNAME][$LINENO]" "$BASH_COMMAND" "$?"; exit 1' ERR

gettokengithub_by_key() {
	local CFILETOKEN=$HOME/.GITHUB_TOKEN
	local ORGANIZATION='chililinux'
	#sed -n "/^$ORGANIZATION=/s/.*=//p" "$CFILETOKEN"
	#sed -n "/^$ORGANIZATION=/s/^[^=]*=\(.*\)$/\1/p" "$CFILETOKEN" | head -n 1
	sed -n "/^$ORGANIZATION=/s/.*=//p" "$CFILETOKEN" | awk 'NR==1'
}

main() {
	local edition=$1
	local vol_id=$2
	local debug_tmate=$3
	local teste_only=$4
	local TOKEN_RELEASE="$(gettokengithub_by_key)"
	local data

	if [[ ! "$edition" =~ ^(base|xfce|awesome|enlightnment|gnome|kde|all)$ ]]; then
		echo "${red}Error: Unknown edition: ${yellow}${edition}${reset}
- valid are:
${yellow}base ${red}or
${yellow}xfce ${red}or
${yellow}awesome ${red}or
${yellow}enlightnment ${red}or
${yellow}fluxbox ${red}or
${yellow}gnome ${red}or
${yellow}kde ${red}or
${yellow}all${reset}"
		return 0
	fi

	[[ -z "$vol_id" ]] && vol_id='VOID_LIVE'
	[[ -z "$debug_tmate" ]] && debug_tmate='false'
	[[ -z "$teste_only" ]] && teste_only='false'
	if [[ ! "$debug_tmate" =~ ^(true|false)$ ]]; then
		echo "${red}Error: Unknown debug tmate: ${yellow}${debug_tmate}${reset} - valid: ${yellow}'true' ${red}or ${yellow}'false' ${reset}"
		return 1
	fi
	if [[ ! "$teste_only" =~ ^(true|false)$ ]]; then
		echo "${red}Error: Unknown teste_input: ${yellow}${teste_input}${reset} - valid: ${yellow}'true' ${red}or ${yellow}'false' ${reset}"
		return 1
	fi

	data='{
  "ref": "main",
  "inputs": {
    "teste_input": "'$teste_only'",
    "vol_id": "'$vol_id'",
    "edition": "'$edition'",
    "tmate": "'$debug_tmate'"
  }
}'

	response=$(curl -s -X POST \
		-H "Accept: application/vnd.github.v3+json" \
		-H "Authorization: token $TOKEN_RELEASE" \
		--data "$data" \
		-w "%{http_code}" \
		-o /dev/null \
		"https://api.github.com/repos/chililinux/build-iso-void/actions/workflows/create-iso.yml/dispatches")

	echo "Response Code: $response"
}

if test $# -lt 1; then
	echo "uso: ${cyan}${APP} <edition> <vol_id> [<tmate>] [<teste_input>]${reset}"
	echo "     ${cyan}${APP} live-xfce-custom VOID_LIVE true false ${reset}"
	echo "     ${cyan}${APP} live-xfce-custom VOID_LIVE ${reset}"
	echo "     ${cyan}${APP} live-base-custom ${reset}"
	exit 1
fi

main "$@"
