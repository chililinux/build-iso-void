name: "Build VoidLinux ISO"
description: "Builds a VoidLinux ISO image"

inputs:
  name:
    description: "Name for the ISO"
    required: true
  tmate:
    description: "Enable debugging with tmate"
    required: false
    default: "true"

outputs:
  iso_path:
    description: "Path to the generated ISO file"
    value: ${{ steps.build.outputs.iso_path }}
  xz_path:
    description: "Path to the generated TAR.XZ file"
    value: ${{ steps.build.outputs.xz_path }}
  release_name:
    description: "Name of the release"
    value: ${{ steps.prepare-iso.outputs.release_name }}

runs:
  using: "composite"
  steps:
    - name: Display the current user in CONTAINER
      shell: bash
      run: |
        # Display the current user in CONTAINER
        echo "##########################################################################"
        echo "Current host is     : $(hostname)"
        echo "Current user is     : $(whoami)"
        echo "Current user ID is  : $(id -u)"
        echo "Current user details: $(id)"
        echo "##########################################################################"
        df -hT || true
        echo "##########################################################################"
        ls -la /mnt || true
        echo "##########################################################################"

    - name: Setup build environment
      shell: bash
      run: |
        # Setup build environment
        {
        echo 'repository=https://repo-fastly.voidlinux.org/current'
        echo 'repository=https://repo-fastly.voidlinux.org/current/nonfree'
        echo 'repository=https://repo-fastly.voidlinux.org/current/multilib'
        echo 'repository=https://repo-fastly.voidlinux.org/current/multilib/nonfree'
        } >> /etc/xbps.d/00-repository-main.conf

        # atualizar e instalar pacotes adicionais
        xbps-install -Sy -f \
          tree \
          duf > /dev/null

    - name: Configurar o ambiente
      shell: bash
      run: |
        WORK_PATH='/__w/build-iso-void/build-iso-void'
        PROFILE_PATH='/__w/build-iso-void/build-iso-void/void-mklive'
        echo "WORK_PATH=$WORK_PATH" >> "$GITHUB_ENV"        # Exporta WORK_PATH para outras etapas
        echo "PROFILE_PATH=$PROFILE_PATH" >> "$GITHUB_ENV"  # Exporta WORK_PATH para outras etapas

    - name: Ajustar ambiente do builduser
      shell: bash
      run: |
        # Ajustar ambiente do root
        pushd /root || true
        cp -Rpa /etc/skel/.bash* . || true
        cp -Rpa /etc/skel/.ps* . || true
        cp -Rpa /etc/skel/.dircolors* . || true
        cp -Rpa /etc/skel/.git-prompt* . || true
        popd || true

        # Ajustar ambiente do builduser
        sudo -u builduser bash << EOF
        cd $HOME || true
        cp -Rpa /etc/skel/.bash* . || true
        cp -Rpa /etc/skel/.ps* . || true
        cp -Rpa /etc/skel/.dircolors* . || true
        cp -Rpa /etc/skel/.git-prompt* . || true
        EOF

    - name: Checkout void-mklive
      shell: bash
      run: |
        # Cloning void-mklive repository
        #REPO="${{ inputs.iso_profiles_repo }}"
        #REPO="https://github.com/void-linux/void-mklive"
        REPO="https://github.com/chililinux/chili-void-mklive"
        echo "Repository: $REPO"

        rm -rf "$WORK_PATH/void-mklive" || true
        if ! git clone --depth 1 "$REPO" "$WORK_PATH/void-mklive"; then
          echo "Falha ao clonar o repositorio $REPO"
          exit 1
        fi
        # ativando 'git config --global --add safe.directory /__w/build-iso/build-iso/iso-profiles'
        git config --global --add safe.directory "$WORK_PATH/void-mklive" || true

        # clean '/__t/' directory
        rm -rf /__t/* || true

    - name: Setup TMATE Session
      uses: mxschmitt/action-tmate@v3
      #if: inputs.tmate == 'true'
      with:
        install-dependencies: false
        detached: true

    - name: Build ISO Image
      shell: bash
      env:
        DEBUG: ${{ inputs.tmate }}
        DISTRONAME: ${{ inputs.name }}
        EDITION: ${{ inputs.edition }}
        MANJAROBRANCH: ${{ inputs.manjaro_branch }}
        COMMUNITYBRANCH: ${{ inputs.community_branch }}
        BIGBRANCH: ${{ inputs.biglinux_branch }}
        SCOPE: ${{ inputs.scope }}
        KERNEL: ${{ inputs.kernel }}
        OFFICE: ${{ inputs.office-chooser }}
        RELEASE_TAG: ${{ inputs.release_tag }}
      run: |
        # BUILD ISO Image
        # Denine path for directory

        # Check if iso-profiles directory exists before proceeding
        if [[ ! -d "$WORK_PATH/void-mklive" ]]; then
          echo "ERRO(L427): $WORK_PATH/void-mklive directory not found."
          exit 1
        fi

        # listando diretório iso-profiles no diretório atual
        ls -la "$WORK_PATH"

        build_iso() {
          echo "########################## RESUMO #################################"
          echo "BUILD COMMAND            : buildiso ${SCOPE:+-f} -p community/$EDITION -b $MANJAROBRANCH -k ${KERNEL_NAME} ${OFFICE:+-o}"
          echo "PROFILE_PATH             : $PROFILE_PATH"
          echo "EDITION                  : $EDITION"
          echo "MANJAROBRANCH            : $MANJAROBRANCH"
          echo "COMMUNITYBRANCH          : $COMMUNITYBRANCH"
          echo "BIGLINUXBRANCH           : $BIGBRANCH"
          echo "KERNEL_VER               : ${KERNEL_VER}"
          echo "KERNEL_NAME              : ${KERNEL_NAME}"
          echo "SCOPE                    : $SCOPE"
          echo "OFFICE                   : $OFFICE"
          echo "###################################################################"
          echo "WORK_PATH                : $WORK_PATH"
          echo "PROFILE_PATH             : $PROFILE_PATH"
          echo "ISO profiles path        : $PROFILE_PATH/$EDITION"
          echo "PATH_MANJARO_ISO_PROFILES: $PATH_MANJARO_ISO_PROFILES"
          echo "###################################################################"
          #echo "ROOT_RUN_DIR             : $(< /root/.config/manjaro-tools/iso-profiles.conf)"
          #echo "BUILDUSER_RUN_DIR        : $(< /home/builduser/.config/manjaro-tools/iso-profiles.conf)"
          echo "###################################################################"

          if [[ "$DEBUG" == 'true' ]]; then
            #sudo buildiso "${SCOPE:+-f}" -p "community/$EDITION" -b "$MANJAROBRANCH" -k "${KERNEL_NAME}" "${OFFICE:+-o}"
            :
          else
            #sudo buildiso "${SCOPE:+-f}" -p "community/$EDITION" -b "$MANJAROBRANCH" -k "${KERNEL_NAME}" "${OFFICE:+-o}" > /dev/null
            :
          fi
        }

        build_mkroot_fs() {
          echo "########################## RESUMO #################################"
          echo "BUILD COMMAND            : buildiso ${SCOPE:+-f} -p community/$EDITION -b $MANJAROBRANCH -k ${KERNEL_NAME} ${OFFICE:+-o}"
          echo "PROFILE_PATH             : $PROFILE_PATH"
          echo "EDITION                  : $EDITION"
          echo "MANJAROBRANCH            : $MANJAROBRANCH"
          echo "COMMUNITYBRANCH          : $COMMUNITYBRANCH"
          echo "BIGLINUXBRANCH           : $BIGBRANCH"
          echo "KERNEL_VER               : ${KERNEL_VER}"
          echo "KERNEL_NAME              : ${KERNEL_NAME}"
          echo "SCOPE                    : $SCOPE"
          echo "OFFICE                   : $OFFICE"
          echo "###################################################################"
          echo "WORK_PATH                : $WORK_PATH"
          echo "PROFILE_PATH             : $PROFILE_PATH"
          echo "ISO profiles path        : $PROFILE_PATH/$EDITION"
          echo "PATH_MANJARO_ISO_PROFILES: $PATH_MANJARO_ISO_PROFILES"
          echo "###################################################################"
          #echo "ROOT_RUN_DIR             : $(< /root/.config/manjaro-tools/iso-profiles.conf)"
          #echo "BUILDUSER_RUN_DIR        : $(< /home/builduser/.config/manjaro-tools/iso-profiles.conf)"
          echo "###################################################################"

          pushd "$WORK_PATH/void-mklive"
          #./mkrootfs
          touch void-x86_64-base-custom-20240917.tar.xz
          popd
        }

        cleanup_and_move_files() {
          OUTPUT_ISO_PATH_NAME=$(find "$WORK_PATH/void-mklive" -type f -name "*.iso" -exec stat -c '%Y %n' {} + | sort -nr | awk 'NR==1 {print $2}')
          OUTPUT_XZ_PATH_NAME=$(find "$WORK_PATH/void-mklive" -type f -name "*.tar.xz" -exec stat -c '%Y %n' {} + | sort -nr | awk 'NR==1 {print $2}')
          ISO_BASENAME=$(basename "$OUTPUT_ISO_PATH_NAME")
          XZ_BASENAME=$(basename "$OUTPUT_XZ_PATH_NAME")

          echo "OUTPUT_ISO_PATH_NAME=$OUTPUT_ISO_PATH_NAME" >> "$GITHUB_ENV"  # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "OUTPUT_XZ_PATH_NAME=$OUTPUT_XZ_PATH_NAME" >> "$GITHUB_ENV"    # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "ISO_BASENAME=$ISO_BASENAME" >> "$GITHUB_ENV"                  # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "XZ_BASENAME=$XZ_BASENAME" >> "$GITHUB_ENV"                    # Exporta OUTPUT_ISO_PATH_NAME para outras etapas

          [[ -n "$OUTPUT_ISO_PATH_NAME" ]] && mv -fv "$OUTPUT_ISO_PATH_NAME" "$WORK_PATH/" || echo "Failed to move ISO file"
          [[ -n "$OUTPUT_XZ_PATH_NAME"  ]] && mv -fv "$OUTPUT_XZ_PATH_NAME" "$WORK_PATH/" || echo "Failed to move tar.xz file"

          # Set environment variables
          echo "ISO_FULLNAME=$WORK_PATH/$ISO_BASENAME" >> "$GITHUB_ENV"
          echo "XZ_FULLNAME=$WORK_PATH/$XZ_BASENAME" >> "$GITHUB_ENV"
          # Set outputs
          echo "iso_path=$WORK_PATH/$ISO_BASENAME" >> "$GITHUB_OUTPUT"
          echo "xz_path=$WORK_PATH/$XZ_BASENAME" >> "$GITHUB_OUTPUT"
        }

        main() {
          build_mkroot_fs
          cleanup_and_move_files
        }

        main
