name: "VoidLinux ISO Builder"
description: "Action to build a custom ISO for VoidLinux"

inputs:
  teste_input:
    type: boolean
    description: "Enable only test"
    required: false
    default: false
  vol_id:
    description: "Nome do VOLUME da ISO"
    required: true
    default: "VOID_LIVE"
  edition:
    description: "Edition of the ISO"
    required: true
    default: "live-xfce-custom"
    options:
      - live-base-custom
      - live-xfce-base
      - live-xfce-custom
      - live-awesome
      - live-enlightnment
      - live-fluxbox
      - live-gnome
      - live-kde
      - live-all
  tmate:
    type: boolean
    description: "Enable debugging with tmate"
    required: false
    default: false

outputs:
  iso_path:
    description: "Path to the generated ISO file"
    value: ${{ steps.build.outputs.iso_path }}
  release_name:
    description: "Name of the release"
    value: ${{ steps.prepare-iso.outputs.release_name }}

runs:
  using: "composite"
  steps:
    - name: Debug teste_input
      shell: bash
      run: |
        echo "teste_input: '${{ inputs.teste_input }}'"

    - name: Display the current user in CONTAINER
      shell: bash
      run: |
        # Display the current user in CONTAINER
        echo "##########################################################################"
        echo "Current host is     : $(hostname)"
        echo "Current user is     : $(whoami)"
        echo "Current user ID is  : $(id -u)"
        echo "Current user details: $(id)"
        echo "##########################################################################"
        df -hT || true
        echo "##########################################################################"
        ls -la /mnt || true
        echo "##########################################################################"

    - name: Setup build environment
      shell: bash
      run: |
        # Setup build environment
        {
        echo 'repository=https://repo-fastly.voidlinux.org/current'
        echo 'repository=https://repo-fastly.voidlinux.org/current/nonfree'
        echo 'repository=https://repo-fastly.voidlinux.org/current/multilib'
        echo 'repository=https://repo-fastly.voidlinux.org/current/multilib/nonfree'
        } >> /etc/xbps.d/00-repository-main.conf

        # atualizar e instalar pacotes adicionais
        xbps-install -Sy -f \
          tree \
          duf > /dev/null

    - name: Configurar o ambiente
      shell: bash
      run: |
        #WORK_PATH='/__w/build-iso-void/build-iso-void'
        #PROFILE_PATH='/__w/build-iso-void/build-iso-void/chili-void-mklive'
        WORK_PATH="/__w/${{env.REPO_NAME}}/${{env.REPO_NAME}}"
        PROFILE_PATH="/__w/${{env.REPO_NAME}}/${{env.REPO_NAME}}/chili-void-mklive"
        BASHRC_PATH="/__w/${{env.REPO_NAME}}/${{env.REPO_NAME}}/chili-void-bashrc"
        echo "WORK_PATH=$WORK_PATH"       >> "$GITHUB_ENV"  # Exporta WORK_PATH para outras etapas
        echo "PROFILE_PATH=$PROFILE_PATH" >> "$GITHUB_ENV"  # Exporta WORK_PATH para outras etapas
        echo "BASHRC_PATH=$BASHRC_PATH"   >> "$GITHUB_ENV"  # Exporta WORK_PATH para outras etapas

    - name: Checkout chili-void-mklive
      if: ${{ inputs.teste_input != true }}
      shell: bash
      run: |
        # Cloning chili-void-mklive repository
        #REPO="${{ inputs.iso_profiles_repo }}"
        REPO="https://github.com/chililinux/chili-void-mklive"
        echo "Repository: $REPO"

        rm -rf "$PROFILE_PATH" || true
        if ! git clone --depth 1 "$REPO" "$PROFILE_PATH"; then
          echo "Falha ao clonar o repositorio $REPO em $PROFILE_PATH"
          exit 1
        fi
        # ativando 'git config --global --add safe.directory'
        git config --global --add safe.directory "$PROFILE_PATH" || true

        # clean '/__t/' directory
        rm -rf /__t/* || true

    - name: Checkout chili-void-bashrc
      if: ${{ inputs.teste_input != true }}
      shell: bash
      run: |
        # Cloning chili-void-bashrc repository
        #REPO="${{ inputs.iso_profiles_repo }}"
        REPO="https://github.com/chililinux/chili-void-bashrc"
        echo "Repository: $REPO"

        rm -rf "$BASHRC_PATH" || true
        if ! git clone --depth 1 "$REPO" "$BASHRC_PATH"; then
          echo "Falha ao clonar o repositorio $REPO em $BASHRC_PATH"
          exit 1
        fi
        # ativando 'git config --global --add safe.directory'
        git config --global --add safe.directory "$BASHRC_PATH" || true

    - name: Ajustar ambiente
      shell: bash
      run: |
        # Ajustar ambiente
        ln -sfv  "$WORK_PATH" /work_path         || true
        cp -Rpva "$BASHRC_PATH"/etc/skel/. /etc/ || true

        # Ajustar ambiente do root
        pushd /root                         || true
        cp -Rpa "$BASHRC_PATH"/etc/skel/. . || true
        for i in dot.*; do
          mv "$i" ".${i#dot.}" || true
        done
        popd || true

        # Ajustar ambiente no /github/home
        pushd /github/home                  || true
        cp -Rpa "$BASHRC_PATH"/etc/skel/. . || true
        for i in dot.*; do
          mv "$i" ".${i#dot.}" || true
        done
        popd || true

        # Ajustar ambiente do builduser
        sudo -u builduser bash << EOF
        pushd /home/builduser/              || true
        cp -Rpa "$BASHRC_PATH"/etc/skel/. . || true
        for i in dot.*.; do
          mv "$i" ".${i#dot.}" || true
        done
        popd || true
        EOF

    - name: Setup TMATE Session
      uses: mxschmitt/action-tmate@v3
      if: ${{ inputs.tmate }} == true }}
      with:
        install-dependencies: false
        detached: true

    - name: Build ISO Image
      if: ${{ inputs.teste_input != true }}
      shell: bash
      env:
        DEBUG: ${{ inputs.tmate != false && inputs.tmate || github.event.client_payload.tmate || false }}
        TESTE: ${{ inputs.teste_input != false && inputs.teste_input || github.event.client_payload.teste_input || false }}
        VOL_ID: ${{ inputs.vol_id || github.event.client_payload.vol_id || 'VOID_LIVE' }}
        EDITION: ${{ inputs.edition || github.event.client_payload.edition || 'live-xfce-custom' }}
        RELEASE_TAG: ${{ inputs.release_tag }}
      run: |
        # BUILD ISO Image

        # Check if directory exists before proceeding
        if [[ ! -d "$PROFILE_PATH" ]]; then
          echo "ERRO(L427): Diretório $PROFILE_PATH não encontrado!"
          exit 1
        fi

        build_iso() {
          local BUILD_COMMAND

          case "$EDITION" in
            live-base-custom)  BUILD_COMMAND='sudo ./mkiso'    ;;
            live-xfce-base)    BUILD_COMMAND='sudo ./mkiso -X' ;;
            live-xfce-custom)  BUILD_COMMAND='sudo ./mkiso -Y' ;;
            live-awesome)      BUILD_COMMAND='sudo ./mkiso -W' ;;
            live-enlightnment) BUILD_COMMAND='sudo ./mkiso -E' ;;
            live-fluxbox)      BUILD_COMMAND='sudo ./mkiso -F' ;;
            live-gnome)        BUILD_COMMAND='sudo ./mkiso -G' ;;
            live-kde)          BUILD_COMMAND='sudo ./mkiso -P' ;;
            live-all)          BUILD_COMMAND='sudo ./mkiso -A' ;;
            *)                 BUILD_COMMAND='sudo ./mkiso'    ;;
          esac

          echo "########################## RESUMO ######################################################"
          echo "DEBUG (tmate)            : $DEBUG"
          echo "TESTE                    : ${{ inputs.teste_input }}"
          echo "VOL_ID                   : $VOL_ID"
          echo "EDITION                  : $EDITION"
          echo "RELEASE_TAG              : $RELEASE_TAG"
          echo "########################################################################################"
          echo "BUILD COMMAND            : $BUILD_COMMAND"
          echo "WORK_PATH                : $WORK_PATH"
          echo "PROFILE_PATH             : $PROFILE_PATH"
          echo "ISO profiles path        : $PROFILE_PATH/$EDITION"
          echo "PATH_MANJARO_ISO_PROFILES: $PATH_MANJARO_ISO_PROFILES"
          #echo "########################################################################################"
          #echo "ROOT_RUN_DIR             : $(< /root/.config/manjaro-tools/iso-profiles.conf)"
          #echo "BUILDUSER_RUN_DIR        : $(< /home/builduser/.config/manjaro-tools/iso-profiles.conf)"
          echo "########################################################################################"

          pushd "$PROFILE_PATH"
          #teste
          #echo "Arquivo 1 de teste" > arquivo1.txt
          #echo "Arquivo 2 de teste" > arquivo2.txt
          #tar -cvJf void-live-base-custom-x86_64-6.6.51_1-20240920-1810.tar.xz arquivo1.txt arquivo2.txt
          #efetivo
          #[[ ${{ inputs.tmate }} == true ]] && ./mkiso || ./mkiso > /dev/null
          eval "$BUILD_COMMAND"
          popd
        }

        cleanup_and_move_files() {
          OUTPUT_ISO_PATH_NAME=$(find "$PROFILE_PATH" -type f -name "*.iso" -exec stat -c '%Y %n' {} + | sort -nr | awk 'NR==1 {print $2}')
          ISO_BASENAME=$(basename "$OUTPUT_ISO_PATH_NAME")

          echo "OUTPUT_ISO_PATH_NAME=$OUTPUT_ISO_PATH_NAME" >> "$GITHUB_ENV"  # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "ISO_BASENAME=$ISO_BASENAME"                 >> "$GITHUB_ENV"  # Exporta OUTPUT_ISO_PATH_NAME para outras etapas

          if [[ -n "$OUTPUT_ISO_PATH_NAME" ]]; then
            mv -fv "$OUTPUT_ISO_PATH_NAME" "$WORK_PATH/" || echo "ERRO: Falha ao mover arquivo ISO $OUTPUT_ISO_PATH_NAME"
            # Set environment variables
            echo "ISO_FULLNAME=$WORK_PATH/$ISO_BASENAME" >> "$GITHUB_ENV"
          fi
        }

        main() {
          build_iso
          cleanup_and_move_files
        }
        main

    - name: Extrair data do nome do arquivo .iso e definir tag_name
      if: ${{ inputs.teste_input != true }}
      id: set-tag-name
      shell: bash
      run: |
        FILENAME="$ISO_BASENAME"
        TAG_NAME=$(echo "$FILENAME" | grep -oP '\d{8}')-$(date +%H%M)
        echo "ISO_TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Set ISO path
      if: ${{ inputs.teste_input != true }}
      shell: bash
      run: |
        # Set outputs
        echo "iso_path=$WORK_PATH/$ISO_BASENAME" >> "$GITHUB_OUTPUT"
